"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.autoConnectInAppWallet = exports.connectInAppWallet = void 0;
const ethereum_js_1 = require("../../../../chains/chain-definitions/ethereum.js");
/**
 * @internal
 */
async function connectInAppWallet(options, createOptions) {
    const { authenticate } = await Promise.resolve().then(() => require("../authentication/index.js"));
    const authResult = await authenticate(options);
    const authAccount = await authResult.user.wallet.getAccount();
    if (createOptions?.smartAccount) {
        return convertToSmartAccount({
            client: options.client,
            authAccount,
            smartAccountOptions: createOptions.smartAccount,
            chain: options.chain,
        });
    }
    return [
        authAccount,
        options.chain || createOptions?.smartAccount?.chain || ethereum_js_1.ethereum,
    ];
}
exports.connectInAppWallet = connectInAppWallet;
/**
 * @internal
 */
async function autoConnectInAppWallet(options, createOptions) {
    const { getAuthenticatedUser } = await Promise.resolve().then(() => require("../authentication/index.js"));
    const user = await getAuthenticatedUser({ client: options.client });
    if (!user) {
        throw new Error("not authenticated");
    }
    const authAccount = await user.wallet.getAccount();
    if (createOptions?.smartAccount) {
        return convertToSmartAccount({
            client: options.client,
            authAccount,
            smartAccountOptions: createOptions.smartAccount,
            chain: options.chain,
        });
    }
    return [
        authAccount,
        options.chain || createOptions?.smartAccount?.chain || ethereum_js_1.ethereum,
    ];
}
exports.autoConnectInAppWallet = autoConnectInAppWallet;
async function convertToSmartAccount(options) {
    const [{ smartWallet }, { connectSmartWallet }] = await Promise.all([
        Promise.resolve().then(() => require("../../../create-wallet.js")),
        Promise.resolve().then(() => require("../../../smart/index.js")),
    ]);
    const sa = smartWallet(options.smartAccountOptions);
    return connectSmartWallet(sa, {
        client: options.client,
        personalAccount: options.authAccount,
        chain: options.chain,
    }, options.smartAccountOptions);
}
//# sourceMappingURL=index.js.map