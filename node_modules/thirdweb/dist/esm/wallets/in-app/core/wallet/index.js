import { ethereum } from "../../../../chains/chain-definitions/ethereum.js";
/**
 * @internal
 */
export async function connectInAppWallet(options, createOptions) {
    const { authenticate } = await import("../authentication/index.js");
    const authResult = await authenticate(options);
    const authAccount = await authResult.user.wallet.getAccount();
    if (createOptions?.smartAccount) {
        return convertToSmartAccount({
            client: options.client,
            authAccount,
            smartAccountOptions: createOptions.smartAccount,
            chain: options.chain,
        });
    }
    return [
        authAccount,
        options.chain || createOptions?.smartAccount?.chain || ethereum,
    ];
}
/**
 * @internal
 */
export async function autoConnectInAppWallet(options, createOptions) {
    const { getAuthenticatedUser } = await import("../authentication/index.js");
    const user = await getAuthenticatedUser({ client: options.client });
    if (!user) {
        throw new Error("not authenticated");
    }
    const authAccount = await user.wallet.getAccount();
    if (createOptions?.smartAccount) {
        return convertToSmartAccount({
            client: options.client,
            authAccount,
            smartAccountOptions: createOptions.smartAccount,
            chain: options.chain,
        });
    }
    return [
        authAccount,
        options.chain || createOptions?.smartAccount?.chain || ethereum,
    ];
}
async function convertToSmartAccount(options) {
    const [{ smartWallet }, { connectSmartWallet }] = await Promise.all([
        import("../../../create-wallet.js"),
        import("../../../smart/index.js"),
    ]);
    const sa = smartWallet(options.smartAccountOptions);
    return connectSmartWallet(sa, {
        client: options.client,
        personalAccount: options.authAccount,
        chain: options.chain,
    }, options.smartAccountOptions);
}
//# sourceMappingURL=index.js.map